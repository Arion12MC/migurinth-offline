name: 'Migurinth App release'

on:
  push:
    branches:
      - prod
    tags:
      - 'v*'
    paths:
      - .github/workflows/app-release.yml
      - 'apps/app/**'
      - 'apps/app-frontend/**'
      - 'packages/app-lib/**'
      - 'packages/app-macros/**'
      - 'packages/assets/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
  workflow_dispatch:

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tauri.conf.json
        id: check
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version exists as tag
        id: check_tag
        run: |
          git fetch --tags
          if git show-ref --tags "v$VERSION" --quiet; then
            echo "::error::Version v$VERSION already exists as a tag. Please increment the version number."
            exit 1
          else
            echo "Version v$VERSION is available for release."
          fi

  build:
    needs: check_version
    if: success()
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-22.04]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Rust setup (mac)
        if: startsWith(matrix.platform, 'macos')
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Rust setup
        if: "!startsWith(matrix.platform, 'macos')"
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup rust cache
        uses: actions/cache@v4
        with:
          path: |
            target/**
            !target/*/release/bundle/*/*.dmg
            !target/*/release/bundle/*/*.app.tar.gz
            !target/*/release/bundle/*/*.app.tar.gz.sig
            !target/release/bundle/*/*.dmg
            !target/release/bundle/*/*.app.tar.gz
            !target/release/bundle/*/*.app.tar.gz.sig

            !target/release/bundle/appimage/*.AppImage
            !target/release/bundle/appimage/*.AppImage.tar.gz
            !target/release/bundle/appimage/*.AppImage.tar.gz.sig
            !target/release/bundle/deb/*.deb
            !target/release/bundle/rpm/*.rpm

            !target/release/bundle/msi/*.msi
            !target/release/bundle/msi/*.msi.zip
            !target/release/bundle/msi/*.msi.zip.sig

            !target/release/bundle/nsis/*.exe
            !target/release/bundle/nsis/*.nsis.zip
            !target/release/bundle/nsis/*.nsis.zip.sig
          key: ${{ runner.os }}-rust-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-target-

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm via corepack
        shell: bash
        run: |
          corepack enable
          corepack prepare --activate

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev pkg-config libayatana-appindicator3-dev librsvg2-dev

      - name: Install frontend dependencies
        run: pnpm install

      - name: build app (macos)
        run: pnpm --filter=@modrinth/app run tauri build --target universal-apple-darwin --config "tauri-release.conf.json"
        if: startsWith(matrix.platform, 'macos')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: build app
        run: pnpm --filter=@modrinth/app run tauri build --config "tauri-release.conf.json"
        id: build_os
        if: "!startsWith(matrix.platform, 'macos')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: upload ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            target/*/release/bundle/*/*.dmg
            target/*/release/bundle/*/*.app.tar.gz
            target/*/release/bundle/*/*.app.tar.gz.sig
            target/release/bundle/*/*.dmg
            target/release/bundle/*/*.app.tar.gz
            target/release/bundle/*/*.app.tar.gz.sig

            target/release/bundle/*/*.AppImage
            target/release/bundle/*/*.AppImage.tar.gz
            target/release/bundle/*/*.AppImage.tar.gz.sig
            target/release/bundle/*/*.deb
            target/release/bundle/*/*.rpm

            target/release/bundle/msi/*.msi
            target/release/bundle/msi/*.msi.zip
            target/release/bundle/msi/*.msi.zip.sig

            target/release/bundle/nsis/*.exe
            target/release/bundle/nsis/*.nsis.zip
            target/release/bundle/nsis/*.nsis.zip.sig

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: Extract version
        id: version
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          body: 'A new version of the MiguRinth App has been released!'
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/*.app.tar.gz
            release-artifacts/**/*.app.tar.gz.sig
            release-artifacts/**/*.AppImage
            release-artifacts/**/*.AppImage.tar.gz
            release-artifacts/**/*.AppImage.tar.gz.sig
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
            release-artifacts/**/*.msi
            release-artifacts/**/*.msi.zip
            release-artifacts/**/*.msi.zip.sig
            release-artifacts/**/*.exe
            release-artifacts/**/*.nsis.zip
            release-artifacts/**/*.nsis.zip.sig

  generate-update-file:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies (pnpm, tauri-cli)
        shell: bash
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Generate updates.json
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          BASE_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/v$VERSION"

          # Windows paths
          WIN_UPDATE="${BASE_URL}/Migurinth_${VERSION}_x64-setup.nsis.zip"
          WIN_INSTALL="${BASE_URL}/Migurinth_${VERSION}_x64-setup.exe"

          # macOS paths
          MAC_UPDATE="${BASE_URL}/Migurinth_${VERSION}_universal.app.tar.gz"
          MAC_INSTALL="${BASE_URL}/Migurinth_${VERSION}_universal.dmg"

          # Linux paths
          LINUX_UPDATE="${BASE_URL}/migurinth_${VERSION}_amd64.AppImage.tar.gz"
          LINUX_DEB="${BASE_URL}/migurinth_${VERSION}_amd64.deb"
          LINUX_RPM="${BASE_URL}/migurinth_${VERSION}_amd64.rpm"
          LINUX_APPIMAGE="${BASE_URL}/migurinth_${VERSION}_amd64.AppImage"

          # Generate updates.json
          tauri signer generate-update \
            -i artifacts/windows-latest \
            -i artifacts/macos-latest \
            -i artifacts/ubuntu-22.04 \
            --base-url $BASE_URL \
            --windows-url "$WIN_UPDATE" \
            --windows-install-url "$WIN_INSTALL" \
            --macos-url "$MAC_UPDATE" \
            --macos-install-url "$MAC_INSTALL" \
            --linux-url "$LINUX_UPDATE" \
            --linux-install-urls "$LINUX_DEB,$LINUX_RPM,$LINUX_APPIMAGE" \
            -o updates.json

      - name: Upload updates.json to release
        run: |
          gh release upload "v$VERSION" updates.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
